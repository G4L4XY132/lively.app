import { resource } from "lively.resources";
if (typeof System !== "undefined") {
  var j = System._nodeRequire("path").join,
      fs = System._nodeRequire("fs"),
      x = System._nodeRequire("child_process").execSync;
} else {
  var j = require("path").join,
      fs = require("fs"),
      x = require("child_process").execSync;
}


var baseDir = process.resourcesPath,
    baseDirRes = resource("file://" + baseDir),
    installerDir = j(baseDir, "lively.installer"),
    packageConfig = j(installerDir, "packages-config.json");

if (fs.existsSync(installerDir) && fs.existsSync(packageConfig)) {
  var livelyModules = JSON.parse(fs.readFileSync(packageConfig)).map(ea => ea.name);
}


let resources = await baseDirRes.dirList(10, {exclude: ["electron.asar", r => !r.isDirectory()]})

let nmMap = {}
for (let baseDirRes of resources) {
  if (!await baseDirRes.join("package.json").exists()) continue;
  let config = await baseDirRes.join("package.json").readJson();
  if (livelyModules.includes(config.name)) continue; // ignore lively packages
  let fullName = config.name + "@" + config.version;
  if (!nmMap[fullName]) nmMap[fullName] = [];
  nmMap[fullName].push(baseDirRes.path())
}

await baseDirRes.join("node_module_index.json").writeJson(nmMap)

// let nmMap = await baseDirRes.join("node_module_index.json").readJson();

let globalNmDir = await baseDirRes.join("node_modules/");
await globalNmDir.ensureExistance()


for (let packageName in nmMap) {
  console.log(`[node_modules fixes] linking ${packageName} to global package folder`)
  let packageDir = globalNmDir.join(packageName + "/"),
      packagePath = packageDir.asFile().url.replace(/^file:\/\//, "");

  if (!await packageDir.exists()) {
    let realDir = nmMap[packageName].find(ea => !isSymLink(ea));
    if (!realDir) {
      console.warn(`Could not find real package dir for ${packageName}`);
      continue;
    }

    console.log(`[${packageName}] mv ${realDir} => ${packagePath}`);
    x(`mv ${realDir} ${packagePath}`);
  }

  for (let linkDestPath of nmMap[packageName]) {
    // linkDestPath = nmMap[packageName][0]
    linkDestPath = linkDestPath.replace(/\/$/, "");
    let linkDest = resource("file://" + linkDestPath),
        localName = linkDest.name(),
        relative = packageDir.asFile().relativePathFrom(linkDest)
    console.log(`[${linkDest.parent().path()}] linking ${localName} => ${relative}`);
    x(`rm -rf ${linkDest.path()}`);
    x(`ln -s ${relative} ${localName}`, {cwd: linkDest.parent().path()});
  }
}


function isSymLink(res) {  
  let path = typeof res === "string" ? res : res.asFile().url
  path = path.replace(/^file:\/\//, "")
  try { fs.readlinkSync(j(path)); return true } catch (err) { return false }
}

